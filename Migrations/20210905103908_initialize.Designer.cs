// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sandbox;

namespace SandBox.Migrations
{
    [DbContext(typeof(SandBoxContext))]
    [Migration("20210905103908_initialize")]
    partial class initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sandbox.Blogging.Model.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.ToTable("blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Url = "/news"
                        },
                        new
                        {
                            BlogId = 2,
                            Url = "/events"
                        });
                });

            modelBuilder.Entity("Sandbox.Blogging.Model.Blogger", b =>
                {
                    b.Property<int>("BloggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloggerId");

                    b.ToTable("bloggers");

                    b.HasData(
                        new
                        {
                            BloggerId = 1,
                            NickName = "John Doe"
                        },
                        new
                        {
                            BloggerId = 2,
                            NickName = "Jane Doe"
                        },
                        new
                        {
                            BloggerId = 3,
                            NickName = "Anonimous"
                        });
                });

            modelBuilder.Entity("Sandbox.Blogging.Model.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("BloggerId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.HasIndex("BloggerId");

                    b.ToTable("posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            BlogId = 1,
                            BloggerId = 1,
                            Content = "New web app with vue client",
                            Title = "Hooray"
                        },
                        new
                        {
                            PostId = 2,
                            BlogId = 2,
                            BloggerId = 1,
                            Content = "EFCore with sql",
                            Title = "DB create"
                        },
                        new
                        {
                            PostId = 3,
                            BlogId = 1,
                            BloggerId = 2,
                            Content = "Testng of REST api passed successfullyt",
                            Title = "Congrats!"
                        });
                });

            modelBuilder.Entity("Sandbox.Library.Model.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FullName = "J.R.R.Tolkien"
                        },
                        new
                        {
                            AuthorId = 2,
                            FullName = "J.K.Rowling"
                        },
                        new
                        {
                            AuthorId = 3,
                            FullName = "Agatha Christie"
                        },
                        new
                        {
                            AuthorId = 4,
                            FullName = "Lewis Carroll"
                        },
                        new
                        {
                            AuthorId = 5,
                            FullName = "Jules Verne"
                        });
                });

            modelBuilder.Entity("Sandbox.Library.Model.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            Title = "Lord of the Rings : The Fellowship of the Ring",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 1,
                            Title = "Lord of the Rings : The Two Towers",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 1,
                            Title = "Lord of the Rings : The Return of the King",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 2,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 2,
                            Title = "Harry Potter and the Chamber of Secrets",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 2,
                            Title = "Harry Potter and the Prisoner of Azkaban",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 2,
                            Title = "Harry Potter and the Goblet of Fire",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 3,
                            Title = "And Then There Were None",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 4,
                            Title = "Alice's Adventures in Wonderland",
                            TotalAmount = 3
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 5,
                            Title = "Twenty Thousand Leagues Under the Sea",
                            TotalAmount = 2
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 5,
                            Title = "In Search of the Castaways",
                            TotalAmount = 2
                        });
                });

            modelBuilder.Entity("Sandbox.Library.Model.Borrowing", b =>
                {
                    b.Property<int>("BorrowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Closed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("BorrowingId");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("borrowings");

                    b.HasData(
                        new
                        {
                            BorrowingId = 1,
                            BookId = 5,
                            BorrowingDate = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 3,
                            Term = 28
                        },
                        new
                        {
                            BorrowingId = 2,
                            BookId = 1,
                            BorrowingDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 1,
                            Term = 14
                        },
                        new
                        {
                            BorrowingId = 3,
                            BookId = 1,
                            BorrowingDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 2,
                            Term = 14
                        },
                        new
                        {
                            BorrowingId = 4,
                            BookId = 4,
                            BorrowingDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 3,
                            Term = 28
                        },
                        new
                        {
                            BorrowingId = 5,
                            BookId = 2,
                            BorrowingDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 1,
                            Term = 14
                        },
                        new
                        {
                            BorrowingId = 6,
                            BookId = 4,
                            BorrowingDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Closed = false,
                            ReaderId = 2,
                            Term = 14
                        });
                });

            modelBuilder.Entity("Sandbox.Library.Model.Reader", b =>
                {
                    b.Property<int>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReaderId");

                    b.ToTable("readers");

                    b.HasData(
                        new
                        {
                            ReaderId = 1,
                            FullName = "Marja Tinline"
                        },
                        new
                        {
                            ReaderId = 2,
                            FullName = "Jermaine Brolechan"
                        },
                        new
                        {
                            ReaderId = 3,
                            FullName = "Olly Yakebowitch"
                        },
                        new
                        {
                            ReaderId = 4,
                            FullName = "Pu Long"
                        },
                        new
                        {
                            ReaderId = 5,
                            FullName = "Celestina Beeching"
                        },
                        new
                        {
                            ReaderId = 6,
                            FullName = "Abner Hyland"
                        },
                        new
                        {
                            ReaderId = 7,
                            FullName = "Florenza Wensley"
                        },
                        new
                        {
                            ReaderId = 8,
                            FullName = "Brocky Greenier"
                        },
                        new
                        {
                            ReaderId = 9,
                            FullName = "Marlie Whannel"
                        },
                        new
                        {
                            ReaderId = 10,
                            FullName = "Raoul Swyne"
                        });
                });

            modelBuilder.Entity("Sandbox.Blogging.Model.Post", b =>
                {
                    b.HasOne("Sandbox.Blogging.Model.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sandbox.Blogging.Model.Blogger", "Blogger")
                        .WithMany()
                        .HasForeignKey("BloggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Blogger");
                });

            modelBuilder.Entity("Sandbox.Library.Model.Book", b =>
                {
                    b.HasOne("Sandbox.Library.Model.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Sandbox.Library.Model.Borrowing", b =>
                {
                    b.HasOne("Sandbox.Library.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("Sandbox.Library.Model.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId");

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });
#pragma warning restore 612, 618
        }
    }
}
